/*
time complexity: O(m^2*n)
space complexity: O(m*n)
 */
import java.util.*;


public class CountSubMatricesWithAllOnes {
    public int numSubmat(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        int ans=0;
        for(int i=0;i<m;i++){
            int res[] = new int[n];
            Arrays.fill(res,1);
            for(int j=i;j<m;j++){
                for(int col=0;col<n;col++){
                    res[col]=res[col] & mat[j][col];
                }
                ans+=oneD(res);
            }
        }
        return ans;
    }
    public int oneD(int[] nums){
        int cons=0;
        int subcnt=0;
        for(int val:nums){
            if(val==0){
                cons=0;
            }else{
                cons++;
            }
            subcnt+=cons;
        }
        return subcnt;

    }
}
